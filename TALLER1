
%%NODO1

#!/usr/bin/python
#importacion del serial
import serial
import rospy
from std_msgs.msg import String
from geometry_msgs.msg import Twist
PuertoSerie=serial.Serial('/dev/ttyACM0', 9600)	
class Node():
	def __init__(self):
		self.rospy=rospy
		self.rospy.init_node("nodo_control",anonymous=True)
		self.initParameters()
		self.initPublishers()
		self.main()
	def initParameters(self):	
		self.topic_ang="/angular"
		self.topic_lin="/lineal"	
		self.msg_ang=String()
		self.msg_lin=String()
		self.msg_arduino=String()
		self.rate=self.rospy.Rate(50)	
		return
	def initPublishers(self):
		self.pub_ang=self.rospy.Publisher(self.topic_ang, String, queue_size=10)
		self.pub_lin=self.rospy.Publisher(self.topic_lin, String, queue_size=10)
		return
	def main(self):
		print("Nodo bien")
		while not self.rospy.is_shutdown():
			raw = PuertoSerie.readline()
			try:
				a, b = raw.strip().split(".")
			except:
				a,b = 5, 3
			print(a,b)
			self.pub_ang.publish(a)
			self.pub_lin.publish(b)
			self.change_arduino=False
			self.rate.sleep()
if __name__=="__main__":
	try:
		print("Inciando Nodo bien bien")
		object=Node()
	except rospy.ROSInterruptException:
		print("Finalizando Nodo")
		pass

%%NODO2

#!/usr/bin/python
import rospy
import math
from std_msgs.msg import String
from std_msgs.msg import Bool
from sensor_msgs.msg import LaserScan
class Node ():
	def __init__(self):
		self.rospy=rospy
		self.rospy.init_node("nodo_control",anonymous=True)
		self.initParameters()
		self.initSubscribers()
		self.initPublishers()
		self.main()
	def initParameters(self):
		self.topic_scan="/scan"
		self.topic_aux="/aux_topic"
		self.topic_vel="/cmd_vel"
		self.msg_scan=[]
		self.msg_grupos=list()
		self.msg_aux=Bool
		self.msg_bandera=Bool
		self.msg_obstaculo=Bool
		self.change_scan=False
		self.rate=self.rospy.Rate(50)	
		return
	def callback_scan(self, msg):
		self.msg_scan=[msg.angle_min, msg.angle_max, msg.angle_increment, msg.range_min, msg.range_max, msg.ranges]		
		self.change_scan=True
		return
	def initSubscribers(self):
		self.sub_scan=self.rospy.Subscriber(self.topic_scan, LaserScan, self.callback_scan)
	def initPublishers(self):
		self.pub_aux=self.rospy.Publisher(self.topic_aux, Bool, queue_size=10)
	def main(self):
		print("Nodo bien")
		while not self.rospy.is_shutdown():
			if self.change_scan:
				angle = self.msg_scan[0]
				x=[]
				y=[]
				i=0
				for i in self.msg_scan[5]:
					x.append(i*math.cos(angle))
					y.append(i*math.sin(angle))
					angle+=self.msg_scan[2]				
				bandera=False
				cont=int
				j=1
			
				for j in len (x):
					if y<3:
						if dist (x[1], y[1] and x[j-1], y[j-1])<1:
							cont=cont+1
						else:
							grupos=append.cont
							bandera=True
					if bandera==False:
						grupos=append.cont
				obstaculo=False
				for l in grupos:
					if l>=n:
						obstaculo=True
					if obstaculo==True:
						msg.data=True
					else:
						msg.data=False	
				self.pub_aux.publish(self.msg.aux)
			self.rate.sleep()
if __name__=="__main__":
	try:
		print("Inciando Nodo bien bien")
		object=Node()
	except rospy.ROSInterruptException:
		print("Finalizando Nodo")
		pass
%%NODO3

#!/usr/bin/python
import rospy
from std_msgs.msg import String
from geometry_msgs.msg import Twist
from std_msgs.msg import Bool
from sensor_msgs.msg import LaserScan
class Node():
	def __init__(self):
		self.rospy=rospy
		self.rospy.init_node("nodo_control",anonymous=True)
		self.initParameters()
		self.initSubscribers()
		self.initPublishers()
		self.main()
	def initParameters(self):
		self.topic_ang="/angular"
		self.topic_lin="/lineal"
		self.topic_aux="/aux_topic"
		self.topic_vel="/cmd_vel"
		self.msg_ang=String()
		self.msg_lin=String()
		self.msg_vel=Twist()
		self.change_aux=False
		self.change_ang=False
		self.change_lin=False
		self.rate=self.rospy.Rate(50)	
		return
	def callback_ang(self, msg):
		self.msg_ang=msg.data
		self.change_ang=True
		return
	def callback_lin(self, msg):
		self.msg_lin=msg.data
		self.change_lin=True
		return	
	def callback_aux(self, msg):
		self.msg_aux=msg.data
		self.change_aux=True
		return	
	def initSubscribers(self):
		self.sub_ang=self.rospy.Subscriber(self.topic_ang, String, self.callback_ang)
		self.sub_lin=self.rospy.Subscriber(self.topic_lin, String, self.callback_lin)
		self.sub_aux=self.rospy.Subscriber(self.topic_aux, Bool, self.callback_aux)
		return
	def initPublishers(self):
		self.pub_vel=self.rospy.Publisher(self.topic_vel, Twist, queue_size=10)
		return
	def main(self):
		print("Nodo bien")
		while not self.rospy.is_shutdown():
			if self.change_ang and self.change_lin:
				self.msg_vel.linear.x=float (self.msg_lin)
				self.msg_vel.angular.z=float(self.msg_ang)
				self.pub_vel.publish(self.msg_vel)
				self.change_ang=False
				self.change_lin=False
			self.rate.sleep()
if __name__=="__main__":
	try:
		print("Inciando Nodo bien bien")
		object=Node()
	except rospy.ROSInterruptException:
		print("Finalizando Nodo")
		pass

%%ARDUINO

long valor;
long valor1;
String POT1;
String POT2;
String valores;
 
void setup() {
  //Inicializamos la comunicaciÃ³n serial
  Serial.begin(9600);
  }
 
void loop() {
  // leemos del pin A0 valor
  valor = analogRead(A0);
  valor1= analogRead(A2);
  String POT1=String ((valor*5)/1023);
  String POT2=String ((valor1*5)/1023);
  
  valores=POT1+String('.')+POT2;
  
 
  //Imprimimos por el monitor serie
  //Serial.print("El valor POT es = ");
  Serial.println(valores);
  delay(50);
  //Imprimimos por el monitor serie
  
 
}


